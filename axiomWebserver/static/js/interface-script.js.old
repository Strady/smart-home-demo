document.addEventListener('DOMContentLoaded', function() {
  // Регистрация Service Worker
  if ('serviceWorker' in navigator) {
      navigator.serviceWorker
      .register('/sw.js')
      .then(function(registration) {
          console.log('Service Worker Registered');
          return registration;
      })
      .catch(function(err) {
          console.error('Unable to register service worker.', err);
      });
  }


  const host = location.host; //Ссылка на хост
  // const host = 'https://app.ttechnika.ru/'
  const debounceTimer = 200; //Задержка для debounce. На практике рекомендуется использовать ~100-300мс

  var socket;
  //var socket = io.connect(host);

  //Компонент главного меню
  const home = {
    data: function () {
      return {
        name: 'AXIOM'
      }
    },
    template: `
    <z-view>
      {{name}}
      <div slot="extension">
        <z-spot
          :angle="0"
          size="l"
          :distance="100"
          label="Освещение"
          label-pos="bottom"
          to-view="lightMenu">
          <i class="far fa-lightbulb" style="font-size:3em"></i>
        </z-spot>
        <z-spot
          :angle="120"
          size="l"
          :distance="120"
          label="Климат"
          label-pos="bottom"
          to-view="climat">
          <i class="far fa-snowflake" style="font-size:3em"></i>
        </z-spot>
        <z-spot
          :angle="240"
          size="l"
          :distance="120"
          label="Безопасность"
          label-pos="bottom"
          to-view="security">
          <i class="fas fa-video" style="font-size:3em"></i>
        </z-spot>
        <z-spot
          :angle="60"
          size="s"
          :distance="100"
          label="Сценарии"
          label-pos="bottom"
          to-view="scenarios">
          <i class="far fa-list-alt"></i>
        </z-spot>
        <z-spot
          :angle="180"
          size="s"
          :distance="100"
          label="Настройки"
          label-pos="bottom"
          to-view="settings">
          <i class="fas fa-cog"></i>
        </z-spot>
      </div>
    </z-view>`
  };

  //Компонент настроек
  const settings = {
    methods: {
      openMountingService: function () {
        window.location.href += 'mounting_service';
      }
    },
    template: `
      <z-view>
        Настройки

        <div slot="extension">
          <z-spot label="Монтажный интерфейс" button size="l" @click.native="openMountingService()">
            <i class="fas fa-wrench" style="font-size:3em"></i>
          </z-spot>
        </div>
      </z-view>
    `
  }

  const lightmenu = {
    data: function() {
      return {
        'rooms': app.rooms
      }
    },
    methods: {
      selectRoom: function(index) {
        app.selectedRoom = index;
        console.log(index);
      }
    },
    template: `
      <z-view>
        Освещение

        <div slot="extension">
          <z-spot
            v-for="(room,index) in rooms"
            @click.native="selectRoom(index)"
            to-view="lights"
            :angle="360/Object.values(rooms).length*index"
            size="l">
            {{room.name}}
          </z-spot>
        </div>
      </z-view>
    `
  }

  //Компонент меню освещения
  const lights = {
    data: function() {
      return {
        'lights': app.lights,
        'rooms': app.rooms,
        'selectedRoom': app.selectedRoom
       }
  },
    beforeCreate: function () {
        // //Получение данных
        // socket.on('state change', function (msg) {
        //     app.lights[msg.id].status = msg.state.status
        //     app.lights[msg.id].state = {
        //       'qty': parseInt(msg.state.value)
        //     };
        // })
        //Получение данных
        socket.on('state change', function(msg) {
            console.log(app.lights)
            //Пересборка JSON'а для knob
            var msgKeys = Object.keys(msg.states),
                msgValues = Object.values(msg.states),
                data = new Object;

            msgValues.forEach(function (value, index) {
              app.lights[msgKeys[index]].status = value.state.status
              app.lights[msgKeys[index]].state.qty = parseInt(value.state.value);
            })
        })
    },
    methods: {
      push: function(val, index) {
        var data = {
            id : index,
            state : {
              'status': val.status,
              'value': val.state.qty
            }
        }
        console.log(data.state.status);

        //Пересборка JSON'а для backend
        var msgKeys = Object.keys(app.lights),
            msgValues = Object.values(app.lights),
            data = new Object;

        msgValues.forEach(function (value, index) {
            data[msgKeys[index]] = {
              'name': value.name,
              'state': {
                'value': value.state.qty,
    'status': value.status
              }
            };
     console.log(value.name,value.status);
     if(value.state.qty) data[msgKeys[index]].state.value = value.state.qty
        })
        data = app.lights;

        socket.emit('pushdata', data);
      },
      //отправление всех данных
      handleComponent: function(){
      console.log(this.lights)
          //Пересборка JSON'а для backend
        var msgKeys = Object.keys(this.lights),
            msgValues = Object.values(this.lights),
            data = new Object;

        msgValues.forEach(function (value, index) {
            data[msgKeys[index]] = {
              'name': value.name,
              'state': {
                'value': value.state.qty,
                'status': value.status,
              }
            };
        })
        //data = app.lights;

        socket.emit('pushdata', data);
          console.log('pushed!')
      },
      style: function(state) {
        if (state) {
          return 'color: green; border: none;'
        } else {
          return 'color: red; border: none;'
        }
      }
    },
    template: `
    <vue2-gesture
      :type="\'touchend\'"
      :call="handleComponent">
      <z-view>{{rooms[selectedRoom].name}}
        <div slot="extension">
        <z-spot
          v-for="(light, index) in lights"
          v-if="light.room == selectedRoom"
          :knob="light.type === 'range'"
          :label="light.name"
          :angle="360/Object.values(lights).length*Object.values(lights).indexOf(light)"
          :distance="110"
          @click.native="handleComponent()"
          size="m"
          v-bind.sync="light.state" >
          <z-spot
            slot="extension"
            button size="s"
            :distance="0"
            @click.native="light.status = !light.status"
            :style="style(light.status)">
              <span v-if="light.type === 'range'">{{light.state.qty}}%</span>
            </z-spot>
          </z-spot>
        </div>
      </z-view>
    </vue2-gesture>`
  }

  var app = new Vue({
    el: '#app',
    data: {
      lights:{},
      rooms:{},
      selectedRoom:null
    },
    created: function(){
      socket = io.connect(host)
        //Получение данных при подключении
        socket.on('json event', function(msg) {
            app.rooms = msg.rooms;

            //Пересборка JSON'а для knob
            var msgKeys = Object.keys(msg.states),
                msgValues = Object.values(msg.states),
                data = new Object;

            msgValues.forEach(function (value, index) {
                data[msgKeys[index]] = {
                  'name': value.name,
                  'room': value.room,
                  'type': value.we_type,
                  'status': value.state.status,
                  'state': {
                    'qty': parseInt(value.state.value),
                    'unit':'%'
                  }
                };
            })
            console.log(data);
            app.lights = data;
        })
    },
    components: {
      home, lights, settings,lightmenu
    },
    mounted () {
      this.$zircle.setView('home')
    }
  })
})
